import java.sql.*;

public class DatabaseAccess extends Thread {
	Statement statement;
	
	public void run() { 
		int percentGetAvailMedia = 20;
		int percentGetNumEpisodes = 20;
		int percentCreateNewPayment = 20;
		int percentCreateNextSeason = 20;
		int percentIncreaseRockRatings = 20;

		int numRequests = 100;
		
		try {
			// Set up connection
			Connection con;
			String usernamestring = "cs421g46";
			String passwordstring = "LuDaBa46";
			String url = "jdbc:postgresql://comp421.cs.mcgill.ca:5432/cs421";

			con = DriverManager.getConnection(url, usernamestring, passwordstring);
			statement = con.createStatement();
			
			for (int i=0; i<numRequests; i++) {
				int choice = (int)(Math.random()*100);
				
				if (choice < percentGetAvailMedia) {
					getAvailableMedia();
					continue;
				}
				if (choice < percentGetAvailMedia + percentGetNumEpisodes) {
					getNumEpisodes();
					continue;
				}
				if (choice < percentGetAvailMedia + percentGetNumEpisodes + percentCreateNewPayment) {
					createNewPayment();
					continue;
				}
				if (choice < percentGetAvailMedia + percentGetNumEpisodes + percentCreateNewPayment + percentCreateNextSeason) {
					createNextSeason();
					continue;
				}
				if (choice < percentGetAvailMedia + percentGetNumEpisodes + percentCreateNewPayment + percentCreateNextSeason + percentIncreaseRockRatings) {
					increaseRockRatings();
					continue;
				}
			}
			
			statement.close();
			con.close();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
    } 
	
	void getAvailableMedia() {
		int accid = (int)((Math.random()*10)+1);;

		try {
			// Create query
			String querySQL = "SELECT title, releaseYear FROM accountuser au, available_in avail, media med\r\n"
					+ "WHERE au.accid=" + accid + " AND au.username=\'User\' AND avail.regname=au.regname AND med.mid=avail.mid;";

			// Execute query
			java.sql.ResultSet rs = statement.executeQuery(querySQL);

			if (rs.next()) {
				System.out.println("Available Media:");
				String name = rs.getString(1);
				int releaseYear = rs.getInt(2);
				System.out.println("	" + name + " (" + releaseYear + ")");

				while (rs.next()) {
					name = rs.getString(1);
					releaseYear = rs.getInt(2);
					System.out.println("	" + name + " (" + releaseYear + ")");
				}
			} else {
				System.out.println("No available media.");
			}
		} catch (SQLException e) {
			String sqlMessage = e.getMessage();
			System.out.println(sqlMessage);
		}
	}

	void getNumEpisodes() {
		int seasonNum = (int)((Math.random()*10)+1);

		try {
			// Create query
			String querySQL = "SELECT COUNT(*) \r\n" + "FROM episode e, media m\r\n"
					+ "WHERE e.mid=m.mid AND m.title=\'Pokemon\' AND e.seasonnum=" + seasonNum + ";";

			// Execute query
			java.sql.ResultSet rs = statement.executeQuery(querySQL);

			while (rs.next()) {
				int numEpisodes = rs.getInt(1);
				System.out.println("Number of episodes in season " + seasonNum + ": " + numEpisodes);
			}
		} catch (SQLException e) {
			String sqlMessage = e.getMessage();
			System.out.println(sqlMessage);
		}
	}

	void createNewPayment() {
		int accid = (int)((Math.random()*10)+1);
		String date = "2020-01-01";
		Double amount = (double)((Math.random()*100)+1);

		try {
			// Create insert string
			String insertSQL = "INSERT INTO payment VALUES (DEFAULT, \'" + date + "\', " + amount + ", " + accid + ");";

			// Execute insert
			statement.executeUpdate(insertSQL);
			
			// If no error
			System.out.println("Successfully added payment for account with ID #" + accid + " on " + date + " for $" + amount + ".");
		} catch (SQLException e) {
			String sqlMessage = e.getMessage();
			System.out.println(sqlMessage);
		}
	}
	
	void createNextSeason() {
		int numSeasons;
		int mid;

		try {
			// SEPARATE QUERIES SINCE SINGLE QUERY WON'T WORK IN CASE TV SHOW HAS 0 SEASONS
			
			// Create query for mid
			String querySQL = "SELECT mid \r\n" + 
					"FROM media \r\n" + 
					"WHERE title=\'Digimon\';";

			// Execute query
			java.sql.ResultSet rs = statement.executeQuery(querySQL);
				
			// Get mid
			if (rs.next()) {
				mid = rs.getInt(1);
			}
			else {
				System.out.println("ERROR: Show does not exist.");
				return;
			}

			// Create query for numSeasons
			querySQL = "SELECT COUNT(*) \r\n" + 
					"FROM season s, media m \r\n" + 
					"WHERE s.mid=m.mid AND m.title=\'Digimon\';";

			// Execute query
			rs = statement.executeQuery(querySQL);
			
			// Get numSeasons
			rs.next();
			numSeasons = rs.getInt(1);

			// Create insert string for season
			String insertSQL = "INSERT INTO season VALUES (" + (numSeasons+1) + ", " + mid + ");";
			// Execute insert
			statement.executeUpdate(insertSQL);
			
			// Create insert string for episode
			insertSQL = "INSERT INTO episode VALUES (1, " + (numSeasons+1) + ", " + mid + ", \'Season " + (numSeasons+1) + " Episode 1\');";
			// Execute insert
			statement.executeUpdate(insertSQL);
		
			// If no error
			System.out.println("Successfully added season " + (numSeasons+1) + " to " + title + " with first episode \"" + epTitle + "\".");
			System.out.println();
			
		} catch (SQLException e) {
			String sqlMessage = e.getMessage();
			System.out.println(sqlMessage);
			System.out.println();
		}
	}
	
	static void increaseRockRatings() {
		try {
			// Create update string
			String updateSQL = "UPDATE rating\r\n" + 
					"SET value = value + 1\r\n" + 
					"WHERE value <= 4 AND mid IN \r\n" + 
					"(\r\n" + 
					"	SELECT mid\r\n" + 
					"	FROM describes d, tag t \r\n" + 
					"	WHERE d.tid=t.tid AND t.tagname='The Rock'\r\n" + 
					");";

			// Execute insert
			statement.executeUpdate(updateSQL);
			
			// If no error
			System.out.println("Successfully increased ratings of all media with The Rock in it by 1.");
			System.out.println();
		} catch (SQLException e) {
			String sqlMessage = e.getMessage();
			System.out.println(sqlMessage);
			System.out.println();
		}
	}

}
